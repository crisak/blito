enum TypeFile {
  VIDEO
  IMAGE
  GIF
  VIDEO_YOUTUBE
  BASE64
}

type File {
  data: String!
  type: TypeFile!
  mimeType: String!
  caption: String
  size: Int
  isBanner: Boolean
}

type ContentProject {
  name: String!
  description: String!
}

enum Sizes {
  XS
  S
  M
  L
  XL
}

enum ContentType {
  ALBUM
  PROJECT
  GALLERY
}

type Content
  @model
  @auth(
    rules: [
      { allow: public, operations: [read] }
      { allow: groups, groups: ["Admin"] }
    ]
  ) {
  id: ID!
  type: ContentType!
  time: Int!
  size: Sizes!
  project: ContentProject
  files: [File]!
  date: AWSDateTime!
  location: Location
  colors: [String]
  userID: String!
  views: Int
  Tags: [Tag] @manyToMany(relationName: "ContentTag")
  Category: Category @hasOne
  Collaborators: [Collaborator] @manyToMany(relationName: "ContentCollaborator")
}

type Tag
  @model
  @auth(
    rules: [
      { allow: public, operations: [read] }
      { allow: groups, groups: ["Admin"] }
    ]
  ) {
  id: ID!
  name: String!
  contents: [Content] @manyToMany(relationName: "ContentTag")
}

type Position {
  latitude: String!
  longitude: String!
}

type Collaborator @model @auth(rules: [{ allow: public }]) {
  id: ID!
  username: String!
  email: String
  phone: String
  socials: [SocialNetwork]!
  fullName: String
  photoUrl: String
  contents: [Content] @manyToMany(relationName: "ContentCollaborator")
}

enum TypeSocialNetwork {
  FACEBOOK
  INSTAGRAM
  YOUTUBE
  TIKTOK
  TWITTER
  PINTEREST
}

type SocialNetwork {
  type: TypeSocialNetwork!
  url: String!
  username: String
}

type Category @model @auth(rules: [{ allow: public }]) {
  id: ID!
  name: String!
  description: String!
}

type Location {
  country: String!
  state: String!
  city: String!
  street: String
  position: Position!
}

input ModelAnalyticsFilterInput {
  data: String!
}

type Analytics {
  url: String!
  status: Boolean!
}

type Query {
  getAnalytics(filter: ModelAnalyticsFilterInput): Analytics
    @function(name: "exportAnalytics-${env}")
}
